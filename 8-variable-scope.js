//'use strict'

// ОБЛАСТЬ ВИДИМОСТИ
// Область видимости определяет границы действия переменной
// 1. Глобальная область видимости - глобальные переменные (window, console)
// 2. Локальная область видимости: область видимости функции, блока (любой код, заключенный в фигурные скобки - {})

let a // глобальная переменная
let b // глобальная переменная

function myFn() {
    let b // локальная переменная, объявленная в зоне видимости функции myFn()
    a = true // использование глобальной переменной, т.к. а не найдена в области видимости функции
    // далее "a" ищется в глобальной области вдимости, т.к. вызов функции myFn() производится в глобальной области видимости
    b = 10 // использование локальной переменной
    console.log(b) // 10, b найдена в области видимости функции myFn()
}

myFn()

console.log(a) // true, поиск в глобальной области видимости, a - глобальная переменная, измененная в теле функции.
console.log(b) // undefined, поиск в глобальной области видимости, b - глобальная переменная

// Пример 2:
const c = 5

function myFnTwo() {
    function innerFn() {
        console.log(c) // 5
    }
    innerFn()
}

myFnTwo()

// innerFn() // ReferenceError: innerFn is not defined
// Функцию innerFn() можно вызвать только внутри функции myFnTwo(), т.к. она объявлена внутри функции myFnTwo(), т.е. находится внутри области видимость myFnTwo()

// Пример 3, (НЕ РЕКОМЕНДУЕТСЯ):
function myBadFunction() {
    d = 10 // объявлена автоматически в глобальной области видимости, так делать не рекомендуется!
    console.log(d)
}

myBadFunction()

// "Строгий режим" ('use strict') запрещает использование необъявленных переменных
// 'use strict' - в начале страницы (глобальная область видимости) или в начале теле функции (область видимости функции)

// Пример 4:
const e = 1

function fnOne() {
    function fnTwo() {
        function fnThree() {
            //'use strict' // можно использовать здесь
            console.log(e)
        }
        fnThree()
    }
    fnTwo()
}
fnOne() // 1